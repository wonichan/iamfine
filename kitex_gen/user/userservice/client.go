// Code generated by Kitex v0.12.3. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	user "hupu/kitex_gen/user"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Register(ctx context.Context, req *user.RegisterRequest, callOptions ...callopt.Option) (r *user.RegisterResponse, err error)
	Login(ctx context.Context, req *user.LoginRequest, callOptions ...callopt.Option) (r *user.LoginResponse, err error)
	GetUser(ctx context.Context, req *user.GetUserRequest, callOptions ...callopt.Option) (r *user.GetUserResponse, err error)
	UpdateUser(ctx context.Context, req *user.UpdateUserRequest, callOptions ...callopt.Option) (r *user.UpdateUserResponse, err error)
	FollowUser(ctx context.Context, req *user.FollowUserRequest, callOptions ...callopt.Option) (r *user.FollowUserResponse, err error)
	UnfollowUser(ctx context.Context, req *user.UnfollowUserRequest, callOptions ...callopt.Option) (r *user.UnfollowUserResponse, err error)
	GetFollowers(ctx context.Context, req *user.GetFollowersRequest, callOptions ...callopt.Option) (r *user.GetFollowersResponse, err error)
	GetFollowing(ctx context.Context, req *user.GetFollowingRequest, callOptions ...callopt.Option) (r *user.GetFollowingResponse, err error)
	CreateAnonymousProfile(ctx context.Context, req *user.CreateAnonymousProfileRequest, callOptions ...callopt.Option) (r *user.CreateAnonymousProfileResponse, err error)
	GetAnonymousProfiles(ctx context.Context, req *user.GetAnonymousProfilesRequest, callOptions ...callopt.Option) (r *user.GetAnonymousProfilesResponse, err error)
	UpdateAnonymousProfile(ctx context.Context, req *user.UpdateAnonymousProfileRequest, callOptions ...callopt.Option) (r *user.UpdateAnonymousProfileResponse, err error)
	GetUserStats(ctx context.Context, req *user.GetUserStatsRequest, callOptions ...callopt.Option) (r *user.GetUserStatsResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserServiceClient struct {
	*kClient
}

func (p *kUserServiceClient) Register(ctx context.Context, req *user.RegisterRequest, callOptions ...callopt.Option) (r *user.RegisterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, req)
}

func (p *kUserServiceClient) Login(ctx context.Context, req *user.LoginRequest, callOptions ...callopt.Option) (r *user.LoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, req)
}

func (p *kUserServiceClient) GetUser(ctx context.Context, req *user.GetUserRequest, callOptions ...callopt.Option) (r *user.GetUserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUser(ctx, req)
}

func (p *kUserServiceClient) UpdateUser(ctx context.Context, req *user.UpdateUserRequest, callOptions ...callopt.Option) (r *user.UpdateUserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateUser(ctx, req)
}

func (p *kUserServiceClient) FollowUser(ctx context.Context, req *user.FollowUserRequest, callOptions ...callopt.Option) (r *user.FollowUserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowUser(ctx, req)
}

func (p *kUserServiceClient) UnfollowUser(ctx context.Context, req *user.UnfollowUserRequest, callOptions ...callopt.Option) (r *user.UnfollowUserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnfollowUser(ctx, req)
}

func (p *kUserServiceClient) GetFollowers(ctx context.Context, req *user.GetFollowersRequest, callOptions ...callopt.Option) (r *user.GetFollowersResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowers(ctx, req)
}

func (p *kUserServiceClient) GetFollowing(ctx context.Context, req *user.GetFollowingRequest, callOptions ...callopt.Option) (r *user.GetFollowingResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowing(ctx, req)
}

func (p *kUserServiceClient) CreateAnonymousProfile(ctx context.Context, req *user.CreateAnonymousProfileRequest, callOptions ...callopt.Option) (r *user.CreateAnonymousProfileResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateAnonymousProfile(ctx, req)
}

func (p *kUserServiceClient) GetAnonymousProfiles(ctx context.Context, req *user.GetAnonymousProfilesRequest, callOptions ...callopt.Option) (r *user.GetAnonymousProfilesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAnonymousProfiles(ctx, req)
}

func (p *kUserServiceClient) UpdateAnonymousProfile(ctx context.Context, req *user.UpdateAnonymousProfileRequest, callOptions ...callopt.Option) (r *user.UpdateAnonymousProfileResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateAnonymousProfile(ctx, req)
}

func (p *kUserServiceClient) GetUserStats(ctx context.Context, req *user.GetUserStatsRequest, callOptions ...callopt.Option) (r *user.GetUserStatsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserStats(ctx, req)
}
