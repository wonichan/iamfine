// Code generated by Kitex v0.12.3. DO NOT EDIT.

package notificationservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	notification "hupu/kitex_gen/notification"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateNotification": kitex.NewMethodInfo(
		createNotificationHandler,
		newNotificationServiceCreateNotificationArgs,
		newNotificationServiceCreateNotificationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetNotificationList": kitex.NewMethodInfo(
		getNotificationListHandler,
		newNotificationServiceGetNotificationListArgs,
		newNotificationServiceGetNotificationListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	notificationServiceServiceInfo                = NewServiceInfo()
	notificationServiceServiceInfoForClient       = NewServiceInfoForClient()
	notificationServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return notificationServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return notificationServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return notificationServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "NotificationService"
	handlerType := (*notification.NotificationService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "notification",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func createNotificationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*notification.NotificationServiceCreateNotificationArgs)
	realResult := result.(*notification.NotificationServiceCreateNotificationResult)
	success, err := handler.(notification.NotificationService).CreateNotification(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNotificationServiceCreateNotificationArgs() interface{} {
	return notification.NewNotificationServiceCreateNotificationArgs()
}

func newNotificationServiceCreateNotificationResult() interface{} {
	return notification.NewNotificationServiceCreateNotificationResult()
}

func getNotificationListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*notification.NotificationServiceGetNotificationListArgs)
	realResult := result.(*notification.NotificationServiceGetNotificationListResult)
	success, err := handler.(notification.NotificationService).GetNotificationList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNotificationServiceGetNotificationListArgs() interface{} {
	return notification.NewNotificationServiceGetNotificationListArgs()
}

func newNotificationServiceGetNotificationListResult() interface{} {
	return notification.NewNotificationServiceGetNotificationListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateNotification(ctx context.Context, req *notification.CreateNotificationRequest) (r *notification.CreateNotificationResponse, err error) {
	var _args notification.NotificationServiceCreateNotificationArgs
	_args.Req = req
	var _result notification.NotificationServiceCreateNotificationResult
	if err = p.c.Call(ctx, "CreateNotification", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetNotificationList(ctx context.Context, req *notification.GetNotificationListRequest) (r *notification.GetNotificationListResponse, err error) {
	var _args notification.NotificationServiceGetNotificationListArgs
	_args.Req = req
	var _result notification.NotificationServiceGetNotificationListResult
	if err = p.c.Call(ctx, "GetNotificationList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
