// Code generated by Kitex v0.12.3. DO NOT EDIT.

package postservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	post "hupu/kitex_gen/post"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreatePost(ctx context.Context, req *post.CreatePostRequest, callOptions ...callopt.Option) (r *post.CreatePostResponse, err error)
	GetPost(ctx context.Context, req *post.GetPostRequest, callOptions ...callopt.Option) (r *post.GetPostResponse, err error)
	GetPostList(ctx context.Context, req *post.GetPostListRequest, callOptions ...callopt.Option) (r *post.GetPostListResponse, err error)
	CreateTopic(ctx context.Context, req *post.CreateTopicRequest, callOptions ...callopt.Option) (r *post.CreateTopicResponse, err error)
	GetTopicList(ctx context.Context, req *post.GetTopicListRequest, callOptions ...callopt.Option) (r *post.GetTopicListResponse, err error)
	CollectPost(ctx context.Context, req *post.CollectPostRequest, callOptions ...callopt.Option) (r *post.CollectPostResponse, err error)
	UncollectPost(ctx context.Context, req *post.UncollectPostRequest, callOptions ...callopt.Option) (r *post.UncollectPostResponse, err error)
	GetCollectedPosts(ctx context.Context, req *post.GetCollectedPostsRequest, callOptions ...callopt.Option) (r *post.GetCollectedPostsResponse, err error)
	RatePost(ctx context.Context, req *post.RatePostRequest, callOptions ...callopt.Option) (r *post.RatePostResponse, err error)
	GetRatingRank(ctx context.Context, req *post.GetRatingRankRequest, callOptions ...callopt.Option) (r *post.GetRatingRankResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kPostServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPostServiceClient struct {
	*kClient
}

func (p *kPostServiceClient) CreatePost(ctx context.Context, req *post.CreatePostRequest, callOptions ...callopt.Option) (r *post.CreatePostResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreatePost(ctx, req)
}

func (p *kPostServiceClient) GetPost(ctx context.Context, req *post.GetPostRequest, callOptions ...callopt.Option) (r *post.GetPostResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPost(ctx, req)
}

func (p *kPostServiceClient) GetPostList(ctx context.Context, req *post.GetPostListRequest, callOptions ...callopt.Option) (r *post.GetPostListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPostList(ctx, req)
}

func (p *kPostServiceClient) CreateTopic(ctx context.Context, req *post.CreateTopicRequest, callOptions ...callopt.Option) (r *post.CreateTopicResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateTopic(ctx, req)
}

func (p *kPostServiceClient) GetTopicList(ctx context.Context, req *post.GetTopicListRequest, callOptions ...callopt.Option) (r *post.GetTopicListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTopicList(ctx, req)
}

func (p *kPostServiceClient) CollectPost(ctx context.Context, req *post.CollectPostRequest, callOptions ...callopt.Option) (r *post.CollectPostResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CollectPost(ctx, req)
}

func (p *kPostServiceClient) UncollectPost(ctx context.Context, req *post.UncollectPostRequest, callOptions ...callopt.Option) (r *post.UncollectPostResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UncollectPost(ctx, req)
}

func (p *kPostServiceClient) GetCollectedPosts(ctx context.Context, req *post.GetCollectedPostsRequest, callOptions ...callopt.Option) (r *post.GetCollectedPostsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCollectedPosts(ctx, req)
}

func (p *kPostServiceClient) RatePost(ctx context.Context, req *post.RatePostRequest, callOptions ...callopt.Option) (r *post.RatePostResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RatePost(ctx, req)
}

func (p *kPostServiceClient) GetRatingRank(ctx context.Context, req *post.GetRatingRankRequest, callOptions ...callopt.Option) (r *post.GetRatingRankResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRatingRank(ctx, req)
}
