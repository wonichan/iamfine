// Code generated by Kitex v0.12.3. DO NOT EDIT.

package postservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	post "hupu/kitex_gen/post"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreatePost": kitex.NewMethodInfo(
		createPostHandler,
		newPostServiceCreatePostArgs,
		newPostServiceCreatePostResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPost": kitex.NewMethodInfo(
		getPostHandler,
		newPostServiceGetPostArgs,
		newPostServiceGetPostResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPostList": kitex.NewMethodInfo(
		getPostListHandler,
		newPostServiceGetPostListArgs,
		newPostServiceGetPostListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdatePost": kitex.NewMethodInfo(
		updatePostHandler,
		newPostServiceUpdatePostArgs,
		newPostServiceUpdatePostResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeletePost": kitex.NewMethodInfo(
		deletePostHandler,
		newPostServiceDeletePostArgs,
		newPostServiceDeletePostResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetRecommendPosts": kitex.NewMethodInfo(
		getRecommendPostsHandler,
		newPostServiceGetRecommendPostsArgs,
		newPostServiceGetRecommendPostsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetHotPosts": kitex.NewMethodInfo(
		getHotPostsHandler,
		newPostServiceGetHotPostsArgs,
		newPostServiceGetHotPostsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetHighScorePosts": kitex.NewMethodInfo(
		getHighScorePostsHandler,
		newPostServiceGetHighScorePostsArgs,
		newPostServiceGetHighScorePostsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetLowScorePosts": kitex.NewMethodInfo(
		getLowScorePostsHandler,
		newPostServiceGetLowScorePostsArgs,
		newPostServiceGetLowScorePostsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetControversialPosts": kitex.NewMethodInfo(
		getControversialPostsHandler,
		newPostServiceGetControversialPostsArgs,
		newPostServiceGetControversialPostsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SearchPosts": kitex.NewMethodInfo(
		searchPostsHandler,
		newPostServiceSearchPostsArgs,
		newPostServiceSearchPostsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateTopic": kitex.NewMethodInfo(
		createTopicHandler,
		newPostServiceCreateTopicArgs,
		newPostServiceCreateTopicResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTopic": kitex.NewMethodInfo(
		getTopicHandler,
		newPostServiceGetTopicArgs,
		newPostServiceGetTopicResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTopicList": kitex.NewMethodInfo(
		getTopicListHandler,
		newPostServiceGetTopicListArgs,
		newPostServiceGetTopicListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetHotTopics": kitex.NewMethodInfo(
		getHotTopicsHandler,
		newPostServiceGetHotTopicsArgs,
		newPostServiceGetHotTopicsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTopicCategories": kitex.NewMethodInfo(
		getTopicCategoriesHandler,
		newPostServiceGetTopicCategoriesArgs,
		newPostServiceGetTopicCategoriesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SearchTopics": kitex.NewMethodInfo(
		searchTopicsHandler,
		newPostServiceSearchTopicsArgs,
		newPostServiceSearchTopicsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ShareTopic": kitex.NewMethodInfo(
		shareTopicHandler,
		newPostServiceShareTopicArgs,
		newPostServiceShareTopicResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CollectPost": kitex.NewMethodInfo(
		collectPostHandler,
		newPostServiceCollectPostArgs,
		newPostServiceCollectPostResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UncollectPost": kitex.NewMethodInfo(
		uncollectPostHandler,
		newPostServiceUncollectPostArgs,
		newPostServiceUncollectPostResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCollectedPosts": kitex.NewMethodInfo(
		getCollectedPostsHandler,
		newPostServiceGetCollectedPostsArgs,
		newPostServiceGetCollectedPostsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RatePost": kitex.NewMethodInfo(
		ratePostHandler,
		newPostServiceRatePostArgs,
		newPostServiceRatePostResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserRating": kitex.NewMethodInfo(
		getUserRatingHandler,
		newPostServiceGetUserRatingArgs,
		newPostServiceGetUserRatingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateRating": kitex.NewMethodInfo(
		updateRatingHandler,
		newPostServiceUpdateRatingArgs,
		newPostServiceUpdateRatingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteRating": kitex.NewMethodInfo(
		deleteRatingHandler,
		newPostServiceDeleteRatingArgs,
		newPostServiceDeleteRatingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetRatingRank": kitex.NewMethodInfo(
		getRatingRankHandler,
		newPostServiceGetRatingRankArgs,
		newPostServiceGetRatingRankResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	postServiceServiceInfo                = NewServiceInfo()
	postServiceServiceInfoForClient       = NewServiceInfoForClient()
	postServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return postServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return postServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return postServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "PostService"
	handlerType := (*post.PostService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "post",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func createPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceCreatePostArgs)
	realResult := result.(*post.PostServiceCreatePostResult)
	success, err := handler.(post.PostService).CreatePost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceCreatePostArgs() interface{} {
	return post.NewPostServiceCreatePostArgs()
}

func newPostServiceCreatePostResult() interface{} {
	return post.NewPostServiceCreatePostResult()
}

func getPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetPostArgs)
	realResult := result.(*post.PostServiceGetPostResult)
	success, err := handler.(post.PostService).GetPost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetPostArgs() interface{} {
	return post.NewPostServiceGetPostArgs()
}

func newPostServiceGetPostResult() interface{} {
	return post.NewPostServiceGetPostResult()
}

func getPostListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetPostListArgs)
	realResult := result.(*post.PostServiceGetPostListResult)
	success, err := handler.(post.PostService).GetPostList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetPostListArgs() interface{} {
	return post.NewPostServiceGetPostListArgs()
}

func newPostServiceGetPostListResult() interface{} {
	return post.NewPostServiceGetPostListResult()
}

func updatePostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceUpdatePostArgs)
	realResult := result.(*post.PostServiceUpdatePostResult)
	success, err := handler.(post.PostService).UpdatePost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceUpdatePostArgs() interface{} {
	return post.NewPostServiceUpdatePostArgs()
}

func newPostServiceUpdatePostResult() interface{} {
	return post.NewPostServiceUpdatePostResult()
}

func deletePostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceDeletePostArgs)
	realResult := result.(*post.PostServiceDeletePostResult)
	success, err := handler.(post.PostService).DeletePost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceDeletePostArgs() interface{} {
	return post.NewPostServiceDeletePostArgs()
}

func newPostServiceDeletePostResult() interface{} {
	return post.NewPostServiceDeletePostResult()
}

func getRecommendPostsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetRecommendPostsArgs)
	realResult := result.(*post.PostServiceGetRecommendPostsResult)
	success, err := handler.(post.PostService).GetRecommendPosts(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetRecommendPostsArgs() interface{} {
	return post.NewPostServiceGetRecommendPostsArgs()
}

func newPostServiceGetRecommendPostsResult() interface{} {
	return post.NewPostServiceGetRecommendPostsResult()
}

func getHotPostsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetHotPostsArgs)
	realResult := result.(*post.PostServiceGetHotPostsResult)
	success, err := handler.(post.PostService).GetHotPosts(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetHotPostsArgs() interface{} {
	return post.NewPostServiceGetHotPostsArgs()
}

func newPostServiceGetHotPostsResult() interface{} {
	return post.NewPostServiceGetHotPostsResult()
}

func getHighScorePostsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetHighScorePostsArgs)
	realResult := result.(*post.PostServiceGetHighScorePostsResult)
	success, err := handler.(post.PostService).GetHighScorePosts(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetHighScorePostsArgs() interface{} {
	return post.NewPostServiceGetHighScorePostsArgs()
}

func newPostServiceGetHighScorePostsResult() interface{} {
	return post.NewPostServiceGetHighScorePostsResult()
}

func getLowScorePostsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetLowScorePostsArgs)
	realResult := result.(*post.PostServiceGetLowScorePostsResult)
	success, err := handler.(post.PostService).GetLowScorePosts(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetLowScorePostsArgs() interface{} {
	return post.NewPostServiceGetLowScorePostsArgs()
}

func newPostServiceGetLowScorePostsResult() interface{} {
	return post.NewPostServiceGetLowScorePostsResult()
}

func getControversialPostsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetControversialPostsArgs)
	realResult := result.(*post.PostServiceGetControversialPostsResult)
	success, err := handler.(post.PostService).GetControversialPosts(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetControversialPostsArgs() interface{} {
	return post.NewPostServiceGetControversialPostsArgs()
}

func newPostServiceGetControversialPostsResult() interface{} {
	return post.NewPostServiceGetControversialPostsResult()
}

func searchPostsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceSearchPostsArgs)
	realResult := result.(*post.PostServiceSearchPostsResult)
	success, err := handler.(post.PostService).SearchPosts(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceSearchPostsArgs() interface{} {
	return post.NewPostServiceSearchPostsArgs()
}

func newPostServiceSearchPostsResult() interface{} {
	return post.NewPostServiceSearchPostsResult()
}

func createTopicHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceCreateTopicArgs)
	realResult := result.(*post.PostServiceCreateTopicResult)
	success, err := handler.(post.PostService).CreateTopic(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceCreateTopicArgs() interface{} {
	return post.NewPostServiceCreateTopicArgs()
}

func newPostServiceCreateTopicResult() interface{} {
	return post.NewPostServiceCreateTopicResult()
}

func getTopicHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetTopicArgs)
	realResult := result.(*post.PostServiceGetTopicResult)
	success, err := handler.(post.PostService).GetTopic(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetTopicArgs() interface{} {
	return post.NewPostServiceGetTopicArgs()
}

func newPostServiceGetTopicResult() interface{} {
	return post.NewPostServiceGetTopicResult()
}

func getTopicListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetTopicListArgs)
	realResult := result.(*post.PostServiceGetTopicListResult)
	success, err := handler.(post.PostService).GetTopicList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetTopicListArgs() interface{} {
	return post.NewPostServiceGetTopicListArgs()
}

func newPostServiceGetTopicListResult() interface{} {
	return post.NewPostServiceGetTopicListResult()
}

func getHotTopicsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetHotTopicsArgs)
	realResult := result.(*post.PostServiceGetHotTopicsResult)
	success, err := handler.(post.PostService).GetHotTopics(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetHotTopicsArgs() interface{} {
	return post.NewPostServiceGetHotTopicsArgs()
}

func newPostServiceGetHotTopicsResult() interface{} {
	return post.NewPostServiceGetHotTopicsResult()
}

func getTopicCategoriesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetTopicCategoriesArgs)
	realResult := result.(*post.PostServiceGetTopicCategoriesResult)
	success, err := handler.(post.PostService).GetTopicCategories(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetTopicCategoriesArgs() interface{} {
	return post.NewPostServiceGetTopicCategoriesArgs()
}

func newPostServiceGetTopicCategoriesResult() interface{} {
	return post.NewPostServiceGetTopicCategoriesResult()
}

func searchTopicsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceSearchTopicsArgs)
	realResult := result.(*post.PostServiceSearchTopicsResult)
	success, err := handler.(post.PostService).SearchTopics(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceSearchTopicsArgs() interface{} {
	return post.NewPostServiceSearchTopicsArgs()
}

func newPostServiceSearchTopicsResult() interface{} {
	return post.NewPostServiceSearchTopicsResult()
}

func shareTopicHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceShareTopicArgs)
	realResult := result.(*post.PostServiceShareTopicResult)
	success, err := handler.(post.PostService).ShareTopic(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceShareTopicArgs() interface{} {
	return post.NewPostServiceShareTopicArgs()
}

func newPostServiceShareTopicResult() interface{} {
	return post.NewPostServiceShareTopicResult()
}

func collectPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceCollectPostArgs)
	realResult := result.(*post.PostServiceCollectPostResult)
	success, err := handler.(post.PostService).CollectPost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceCollectPostArgs() interface{} {
	return post.NewPostServiceCollectPostArgs()
}

func newPostServiceCollectPostResult() interface{} {
	return post.NewPostServiceCollectPostResult()
}

func uncollectPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceUncollectPostArgs)
	realResult := result.(*post.PostServiceUncollectPostResult)
	success, err := handler.(post.PostService).UncollectPost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceUncollectPostArgs() interface{} {
	return post.NewPostServiceUncollectPostArgs()
}

func newPostServiceUncollectPostResult() interface{} {
	return post.NewPostServiceUncollectPostResult()
}

func getCollectedPostsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetCollectedPostsArgs)
	realResult := result.(*post.PostServiceGetCollectedPostsResult)
	success, err := handler.(post.PostService).GetCollectedPosts(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetCollectedPostsArgs() interface{} {
	return post.NewPostServiceGetCollectedPostsArgs()
}

func newPostServiceGetCollectedPostsResult() interface{} {
	return post.NewPostServiceGetCollectedPostsResult()
}

func ratePostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceRatePostArgs)
	realResult := result.(*post.PostServiceRatePostResult)
	success, err := handler.(post.PostService).RatePost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceRatePostArgs() interface{} {
	return post.NewPostServiceRatePostArgs()
}

func newPostServiceRatePostResult() interface{} {
	return post.NewPostServiceRatePostResult()
}

func getUserRatingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetUserRatingArgs)
	realResult := result.(*post.PostServiceGetUserRatingResult)
	success, err := handler.(post.PostService).GetUserRating(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetUserRatingArgs() interface{} {
	return post.NewPostServiceGetUserRatingArgs()
}

func newPostServiceGetUserRatingResult() interface{} {
	return post.NewPostServiceGetUserRatingResult()
}

func updateRatingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceUpdateRatingArgs)
	realResult := result.(*post.PostServiceUpdateRatingResult)
	success, err := handler.(post.PostService).UpdateRating(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceUpdateRatingArgs() interface{} {
	return post.NewPostServiceUpdateRatingArgs()
}

func newPostServiceUpdateRatingResult() interface{} {
	return post.NewPostServiceUpdateRatingResult()
}

func deleteRatingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceDeleteRatingArgs)
	realResult := result.(*post.PostServiceDeleteRatingResult)
	success, err := handler.(post.PostService).DeleteRating(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceDeleteRatingArgs() interface{} {
	return post.NewPostServiceDeleteRatingArgs()
}

func newPostServiceDeleteRatingResult() interface{} {
	return post.NewPostServiceDeleteRatingResult()
}

func getRatingRankHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetRatingRankArgs)
	realResult := result.(*post.PostServiceGetRatingRankResult)
	success, err := handler.(post.PostService).GetRatingRank(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetRatingRankArgs() interface{} {
	return post.NewPostServiceGetRatingRankArgs()
}

func newPostServiceGetRatingRankResult() interface{} {
	return post.NewPostServiceGetRatingRankResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreatePost(ctx context.Context, req *post.CreatePostRequest) (r *post.CreatePostResponse, err error) {
	var _args post.PostServiceCreatePostArgs
	_args.Req = req
	var _result post.PostServiceCreatePostResult
	if err = p.c.Call(ctx, "CreatePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPost(ctx context.Context, req *post.GetPostRequest) (r *post.GetPostResponse, err error) {
	var _args post.PostServiceGetPostArgs
	_args.Req = req
	var _result post.PostServiceGetPostResult
	if err = p.c.Call(ctx, "GetPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPostList(ctx context.Context, req *post.GetPostListRequest) (r *post.GetPostListResponse, err error) {
	var _args post.PostServiceGetPostListArgs
	_args.Req = req
	var _result post.PostServiceGetPostListResult
	if err = p.c.Call(ctx, "GetPostList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePost(ctx context.Context, req *post.UpdatePostRequest) (r *post.UpdatePostResponse, err error) {
	var _args post.PostServiceUpdatePostArgs
	_args.Req = req
	var _result post.PostServiceUpdatePostResult
	if err = p.c.Call(ctx, "UpdatePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePost(ctx context.Context, req *post.DeletePostRequest) (r *post.DeletePostResponse, err error) {
	var _args post.PostServiceDeletePostArgs
	_args.Req = req
	var _result post.PostServiceDeletePostResult
	if err = p.c.Call(ctx, "DeletePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRecommendPosts(ctx context.Context, req *post.GetRecommendPostsRequest) (r *post.GetRecommendPostsResponse, err error) {
	var _args post.PostServiceGetRecommendPostsArgs
	_args.Req = req
	var _result post.PostServiceGetRecommendPostsResult
	if err = p.c.Call(ctx, "GetRecommendPosts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetHotPosts(ctx context.Context, req *post.GetHotPostsRequest) (r *post.GetHotPostsResponse, err error) {
	var _args post.PostServiceGetHotPostsArgs
	_args.Req = req
	var _result post.PostServiceGetHotPostsResult
	if err = p.c.Call(ctx, "GetHotPosts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetHighScorePosts(ctx context.Context, req *post.GetHighScorePostsRequest) (r *post.GetHighScorePostsResponse, err error) {
	var _args post.PostServiceGetHighScorePostsArgs
	_args.Req = req
	var _result post.PostServiceGetHighScorePostsResult
	if err = p.c.Call(ctx, "GetHighScorePosts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLowScorePosts(ctx context.Context, req *post.GetLowScorePostsRequest) (r *post.GetLowScorePostsResponse, err error) {
	var _args post.PostServiceGetLowScorePostsArgs
	_args.Req = req
	var _result post.PostServiceGetLowScorePostsResult
	if err = p.c.Call(ctx, "GetLowScorePosts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetControversialPosts(ctx context.Context, req *post.GetControversialPostsRequest) (r *post.GetControversialPostsResponse, err error) {
	var _args post.PostServiceGetControversialPostsArgs
	_args.Req = req
	var _result post.PostServiceGetControversialPostsResult
	if err = p.c.Call(ctx, "GetControversialPosts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchPosts(ctx context.Context, req *post.SearchPostsRequest) (r *post.SearchPostsResponse, err error) {
	var _args post.PostServiceSearchPostsArgs
	_args.Req = req
	var _result post.PostServiceSearchPostsResult
	if err = p.c.Call(ctx, "SearchPosts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateTopic(ctx context.Context, req *post.CreateTopicRequest) (r *post.CreateTopicResponse, err error) {
	var _args post.PostServiceCreateTopicArgs
	_args.Req = req
	var _result post.PostServiceCreateTopicResult
	if err = p.c.Call(ctx, "CreateTopic", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTopic(ctx context.Context, req *post.GetTopicRequest) (r *post.GetTopicResponse, err error) {
	var _args post.PostServiceGetTopicArgs
	_args.Req = req
	var _result post.PostServiceGetTopicResult
	if err = p.c.Call(ctx, "GetTopic", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTopicList(ctx context.Context, req *post.GetTopicListRequest) (r *post.GetTopicListResponse, err error) {
	var _args post.PostServiceGetTopicListArgs
	_args.Req = req
	var _result post.PostServiceGetTopicListResult
	if err = p.c.Call(ctx, "GetTopicList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetHotTopics(ctx context.Context, req *post.GetHotTopicsRequest) (r *post.GetHotTopicsResponse, err error) {
	var _args post.PostServiceGetHotTopicsArgs
	_args.Req = req
	var _result post.PostServiceGetHotTopicsResult
	if err = p.c.Call(ctx, "GetHotTopics", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTopicCategories(ctx context.Context, req *post.GetTopicCategoriesRequest) (r *post.GetTopicCategoriesResponse, err error) {
	var _args post.PostServiceGetTopicCategoriesArgs
	_args.Req = req
	var _result post.PostServiceGetTopicCategoriesResult
	if err = p.c.Call(ctx, "GetTopicCategories", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchTopics(ctx context.Context, req *post.SearchTopicsRequest) (r *post.SearchTopicsResponse, err error) {
	var _args post.PostServiceSearchTopicsArgs
	_args.Req = req
	var _result post.PostServiceSearchTopicsResult
	if err = p.c.Call(ctx, "SearchTopics", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShareTopic(ctx context.Context, req *post.ShareTopicRequest) (r *post.ShareTopicResponse, err error) {
	var _args post.PostServiceShareTopicArgs
	_args.Req = req
	var _result post.PostServiceShareTopicResult
	if err = p.c.Call(ctx, "ShareTopic", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CollectPost(ctx context.Context, req *post.CollectPostRequest) (r *post.CollectPostResponse, err error) {
	var _args post.PostServiceCollectPostArgs
	_args.Req = req
	var _result post.PostServiceCollectPostResult
	if err = p.c.Call(ctx, "CollectPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UncollectPost(ctx context.Context, req *post.UncollectPostRequest) (r *post.UncollectPostResponse, err error) {
	var _args post.PostServiceUncollectPostArgs
	_args.Req = req
	var _result post.PostServiceUncollectPostResult
	if err = p.c.Call(ctx, "UncollectPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCollectedPosts(ctx context.Context, req *post.GetCollectedPostsRequest) (r *post.GetCollectedPostsResponse, err error) {
	var _args post.PostServiceGetCollectedPostsArgs
	_args.Req = req
	var _result post.PostServiceGetCollectedPostsResult
	if err = p.c.Call(ctx, "GetCollectedPosts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RatePost(ctx context.Context, req *post.RatePostRequest) (r *post.RatePostResponse, err error) {
	var _args post.PostServiceRatePostArgs
	_args.Req = req
	var _result post.PostServiceRatePostResult
	if err = p.c.Call(ctx, "RatePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserRating(ctx context.Context, req *post.GetUserRatingRequest) (r *post.GetUserRatingResponse, err error) {
	var _args post.PostServiceGetUserRatingArgs
	_args.Req = req
	var _result post.PostServiceGetUserRatingResult
	if err = p.c.Call(ctx, "GetUserRating", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRating(ctx context.Context, req *post.UpdateRatingRequest) (r *post.UpdateRatingResponse, err error) {
	var _args post.PostServiceUpdateRatingArgs
	_args.Req = req
	var _result post.PostServiceUpdateRatingResult
	if err = p.c.Call(ctx, "UpdateRating", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRating(ctx context.Context, req *post.DeleteRatingRequest) (r *post.DeleteRatingResponse, err error) {
	var _args post.PostServiceDeleteRatingArgs
	_args.Req = req
	var _result post.PostServiceDeleteRatingResult
	if err = p.c.Call(ctx, "DeleteRating", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRatingRank(ctx context.Context, req *post.GetRatingRankRequest) (r *post.GetRatingRankResponse, err error) {
	var _args post.PostServiceGetRatingRankArgs
	_args.Req = req
	var _result post.PostServiceGetRatingRankResult
	if err = p.c.Call(ctx, "GetRatingRank", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
