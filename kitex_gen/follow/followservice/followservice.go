// Code generated by Kitex v0.12.3. DO NOT EDIT.

package followservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	follow "hupu/kitex_gen/follow"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Follow": kitex.NewMethodInfo(
		followHandler,
		newFollowServiceFollowArgs,
		newFollowServiceFollowResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Unfollow": kitex.NewMethodInfo(
		unfollowHandler,
		newFollowServiceUnfollowArgs,
		newFollowServiceUnfollowResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"IsFollowing": kitex.NewMethodInfo(
		isFollowingHandler,
		newFollowServiceIsFollowingArgs,
		newFollowServiceIsFollowingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFollowList": kitex.NewMethodInfo(
		getFollowListHandler,
		newFollowServiceGetFollowListArgs,
		newFollowServiceGetFollowListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFollowerList": kitex.NewMethodInfo(
		getFollowerListHandler,
		newFollowServiceGetFollowerListArgs,
		newFollowServiceGetFollowerListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	followServiceServiceInfo                = NewServiceInfo()
	followServiceServiceInfoForClient       = NewServiceInfoForClient()
	followServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return followServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return followServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return followServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "FollowService"
	handlerType := (*follow.FollowService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "follow",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func followHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follow.FollowServiceFollowArgs)
	realResult := result.(*follow.FollowServiceFollowResult)
	success, err := handler.(follow.FollowService).Follow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceFollowArgs() interface{} {
	return follow.NewFollowServiceFollowArgs()
}

func newFollowServiceFollowResult() interface{} {
	return follow.NewFollowServiceFollowResult()
}

func unfollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follow.FollowServiceUnfollowArgs)
	realResult := result.(*follow.FollowServiceUnfollowResult)
	success, err := handler.(follow.FollowService).Unfollow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceUnfollowArgs() interface{} {
	return follow.NewFollowServiceUnfollowArgs()
}

func newFollowServiceUnfollowResult() interface{} {
	return follow.NewFollowServiceUnfollowResult()
}

func isFollowingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follow.FollowServiceIsFollowingArgs)
	realResult := result.(*follow.FollowServiceIsFollowingResult)
	success, err := handler.(follow.FollowService).IsFollowing(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceIsFollowingArgs() interface{} {
	return follow.NewFollowServiceIsFollowingArgs()
}

func newFollowServiceIsFollowingResult() interface{} {
	return follow.NewFollowServiceIsFollowingResult()
}

func getFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follow.FollowServiceGetFollowListArgs)
	realResult := result.(*follow.FollowServiceGetFollowListResult)
	success, err := handler.(follow.FollowService).GetFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceGetFollowListArgs() interface{} {
	return follow.NewFollowServiceGetFollowListArgs()
}

func newFollowServiceGetFollowListResult() interface{} {
	return follow.NewFollowServiceGetFollowListResult()
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follow.FollowServiceGetFollowerListArgs)
	realResult := result.(*follow.FollowServiceGetFollowerListResult)
	success, err := handler.(follow.FollowService).GetFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceGetFollowerListArgs() interface{} {
	return follow.NewFollowServiceGetFollowerListArgs()
}

func newFollowServiceGetFollowerListResult() interface{} {
	return follow.NewFollowServiceGetFollowerListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Follow(ctx context.Context, req *follow.FollowRequest) (r *follow.FollowResponse, err error) {
	var _args follow.FollowServiceFollowArgs
	_args.Req = req
	var _result follow.FollowServiceFollowResult
	if err = p.c.Call(ctx, "Follow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Unfollow(ctx context.Context, req *follow.UnfollowRequest) (r *follow.UnfollowResponse, err error) {
	var _args follow.FollowServiceUnfollowArgs
	_args.Req = req
	var _result follow.FollowServiceUnfollowResult
	if err = p.c.Call(ctx, "Unfollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFollowing(ctx context.Context, req *follow.FollowRequest) (r *follow.FollowResponse, err error) {
	var _args follow.FollowServiceIsFollowingArgs
	_args.Req = req
	var _result follow.FollowServiceIsFollowingResult
	if err = p.c.Call(ctx, "IsFollowing", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowList(ctx context.Context, req *follow.GetFollowListRequest) (r *follow.GetFollowListResponse, err error) {
	var _args follow.FollowServiceGetFollowListArgs
	_args.Req = req
	var _result follow.FollowServiceGetFollowListResult
	if err = p.c.Call(ctx, "GetFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, req *follow.GetFollowerListRequest) (r *follow.GetFollowerListResponse, err error) {
	var _args follow.FollowServiceGetFollowerListArgs
	_args.Req = req
	var _result follow.FollowServiceGetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
