// Code generated by Kitex v0.12.3. DO NOT EDIT.

package followservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	follow "hupu/kitex_gen/follow"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Follow(ctx context.Context, req *follow.FollowRequest, callOptions ...callopt.Option) (r *follow.FollowResponse, err error)
	Unfollow(ctx context.Context, req *follow.UnfollowRequest, callOptions ...callopt.Option) (r *follow.UnfollowResponse, err error)
	IsFollowing(ctx context.Context, req *follow.FollowRequest, callOptions ...callopt.Option) (r *follow.FollowResponse, err error)
	GetFollowList(ctx context.Context, req *follow.GetFollowListRequest, callOptions ...callopt.Option) (r *follow.GetFollowListResponse, err error)
	GetFollowerList(ctx context.Context, req *follow.GetFollowerListRequest, callOptions ...callopt.Option) (r *follow.GetFollowerListResponse, err error)
	CheckFollowStatus(ctx context.Context, req *follow.CheckFollowStatusRequest, callOptions ...callopt.Option) (r *follow.CheckFollowStatusResponse, err error)
	GetFollowCount(ctx context.Context, req *follow.GetFollowCountRequest, callOptions ...callopt.Option) (r *follow.GetFollowCountResponse, err error)
	GetFollowerCount(ctx context.Context, req *follow.GetFollowerCountRequest, callOptions ...callopt.Option) (r *follow.GetFollowerCountResponse, err error)
	GetMutualFollows(ctx context.Context, req *follow.GetMutualFollowsRequest, callOptions ...callopt.Option) (r *follow.GetMutualFollowsResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kFollowServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kFollowServiceClient struct {
	*kClient
}

func (p *kFollowServiceClient) Follow(ctx context.Context, req *follow.FollowRequest, callOptions ...callopt.Option) (r *follow.FollowResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Follow(ctx, req)
}

func (p *kFollowServiceClient) Unfollow(ctx context.Context, req *follow.UnfollowRequest, callOptions ...callopt.Option) (r *follow.UnfollowResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Unfollow(ctx, req)
}

func (p *kFollowServiceClient) IsFollowing(ctx context.Context, req *follow.FollowRequest, callOptions ...callopt.Option) (r *follow.FollowResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IsFollowing(ctx, req)
}

func (p *kFollowServiceClient) GetFollowList(ctx context.Context, req *follow.GetFollowListRequest, callOptions ...callopt.Option) (r *follow.GetFollowListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowList(ctx, req)
}

func (p *kFollowServiceClient) GetFollowerList(ctx context.Context, req *follow.GetFollowerListRequest, callOptions ...callopt.Option) (r *follow.GetFollowerListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowerList(ctx, req)
}

func (p *kFollowServiceClient) CheckFollowStatus(ctx context.Context, req *follow.CheckFollowStatusRequest, callOptions ...callopt.Option) (r *follow.CheckFollowStatusResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckFollowStatus(ctx, req)
}

func (p *kFollowServiceClient) GetFollowCount(ctx context.Context, req *follow.GetFollowCountRequest, callOptions ...callopt.Option) (r *follow.GetFollowCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowCount(ctx, req)
}

func (p *kFollowServiceClient) GetFollowerCount(ctx context.Context, req *follow.GetFollowerCountRequest, callOptions ...callopt.Option) (r *follow.GetFollowerCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowerCount(ctx, req)
}

func (p *kFollowServiceClient) GetMutualFollows(ctx context.Context, req *follow.GetMutualFollowsRequest, callOptions ...callopt.Option) (r *follow.GetMutualFollowsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetMutualFollows(ctx, req)
}
