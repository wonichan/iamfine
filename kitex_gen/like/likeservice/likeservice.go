// Code generated by Kitex v0.12.3. DO NOT EDIT.

package likeservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	like "hupu/kitex_gen/like"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Like": kitex.NewMethodInfo(
		likeHandler,
		newLikeServiceLikeArgs,
		newLikeServiceLikeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Unlike": kitex.NewMethodInfo(
		unlikeHandler,
		newLikeServiceUnlikeArgs,
		newLikeServiceUnlikeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"IsLiked": kitex.NewMethodInfo(
		isLikedHandler,
		newLikeServiceIsLikedArgs,
		newLikeServiceIsLikedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetLikeList": kitex.NewMethodInfo(
		getLikeListHandler,
		newLikeServiceGetLikeListArgs,
		newLikeServiceGetLikeListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetLikeCount": kitex.NewMethodInfo(
		getLikeCountHandler,
		newLikeServiceGetLikeCountArgs,
		newLikeServiceGetLikeCountResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetLikeUsers": kitex.NewMethodInfo(
		getLikeUsersHandler,
		newLikeServiceGetLikeUsersArgs,
		newLikeServiceGetLikeUsersResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	likeServiceServiceInfo                = NewServiceInfo()
	likeServiceServiceInfoForClient       = NewServiceInfoForClient()
	likeServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return likeServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return likeServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return likeServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "LikeService"
	handlerType := (*like.LikeService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "like",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func likeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceLikeArgs)
	realResult := result.(*like.LikeServiceLikeResult)
	success, err := handler.(like.LikeService).Like(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceLikeArgs() interface{} {
	return like.NewLikeServiceLikeArgs()
}

func newLikeServiceLikeResult() interface{} {
	return like.NewLikeServiceLikeResult()
}

func unlikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceUnlikeArgs)
	realResult := result.(*like.LikeServiceUnlikeResult)
	success, err := handler.(like.LikeService).Unlike(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceUnlikeArgs() interface{} {
	return like.NewLikeServiceUnlikeArgs()
}

func newLikeServiceUnlikeResult() interface{} {
	return like.NewLikeServiceUnlikeResult()
}

func isLikedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceIsLikedArgs)
	realResult := result.(*like.LikeServiceIsLikedResult)
	success, err := handler.(like.LikeService).IsLiked(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceIsLikedArgs() interface{} {
	return like.NewLikeServiceIsLikedArgs()
}

func newLikeServiceIsLikedResult() interface{} {
	return like.NewLikeServiceIsLikedResult()
}

func getLikeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceGetLikeListArgs)
	realResult := result.(*like.LikeServiceGetLikeListResult)
	success, err := handler.(like.LikeService).GetLikeList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceGetLikeListArgs() interface{} {
	return like.NewLikeServiceGetLikeListArgs()
}

func newLikeServiceGetLikeListResult() interface{} {
	return like.NewLikeServiceGetLikeListResult()
}

func getLikeCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceGetLikeCountArgs)
	realResult := result.(*like.LikeServiceGetLikeCountResult)
	success, err := handler.(like.LikeService).GetLikeCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceGetLikeCountArgs() interface{} {
	return like.NewLikeServiceGetLikeCountArgs()
}

func newLikeServiceGetLikeCountResult() interface{} {
	return like.NewLikeServiceGetLikeCountResult()
}

func getLikeUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceGetLikeUsersArgs)
	realResult := result.(*like.LikeServiceGetLikeUsersResult)
	success, err := handler.(like.LikeService).GetLikeUsers(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceGetLikeUsersArgs() interface{} {
	return like.NewLikeServiceGetLikeUsersArgs()
}

func newLikeServiceGetLikeUsersResult() interface{} {
	return like.NewLikeServiceGetLikeUsersResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Like(ctx context.Context, req *like.LikeRequest) (r *like.LikeResponse, err error) {
	var _args like.LikeServiceLikeArgs
	_args.Req = req
	var _result like.LikeServiceLikeResult
	if err = p.c.Call(ctx, "Like", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Unlike(ctx context.Context, req *like.UnlikeRequest) (r *like.UnlikeResponse, err error) {
	var _args like.LikeServiceUnlikeArgs
	_args.Req = req
	var _result like.LikeServiceUnlikeResult
	if err = p.c.Call(ctx, "Unlike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsLiked(ctx context.Context, req *like.LikeRequest) (r *like.LikeResponse, err error) {
	var _args like.LikeServiceIsLikedArgs
	_args.Req = req
	var _result like.LikeServiceIsLikedResult
	if err = p.c.Call(ctx, "IsLiked", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikeList(ctx context.Context, req *like.GetLikeListRequest) (r *like.GetLikeListResponse, err error) {
	var _args like.LikeServiceGetLikeListArgs
	_args.Req = req
	var _result like.LikeServiceGetLikeListResult
	if err = p.c.Call(ctx, "GetLikeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikeCount(ctx context.Context, req *like.GetLikeCountRequest) (r *like.GetLikeCountResponse, err error) {
	var _args like.LikeServiceGetLikeCountArgs
	_args.Req = req
	var _result like.LikeServiceGetLikeCountResult
	if err = p.c.Call(ctx, "GetLikeCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikeUsers(ctx context.Context, req *like.GetLikeUsersRequest) (r *like.GetLikeUsersResponse, err error) {
	var _args like.LikeServiceGetLikeUsersArgs
	_args.Req = req
	var _result like.LikeServiceGetLikeUsersResult
	if err = p.c.Call(ctx, "GetLikeUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
